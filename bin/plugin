#!/usr/bin/env node
'use strict';

require("dotenv").config();
const commander = require('commander');
const LogHelper = require('../helpers/log');
const ConfigHelper = require('../helpers/config');
const PluginHelper = require('../helpers/plugin');
const DatabaseHelper = require('../helpers/database');

const log = new LogHelper('bin/plugin');

async function run(action) {
    try {
        await action();
        process.exit(0);
    }
    catch (error) {
        log.error(error);
        process.exit(1);
    }
}

commander.version(ConfigHelper.getVersion(), '-V, --version');

commander
    .command('list')
    .alias('ls')
    .description('List all installed plugin instances and their statusâ€¦')
    .action(function () {
        run(async function () {
            const Table = require('cli-table');
            const table = new Table({
                head: ['ID', 'Document', 'Plugin']
            });

            const plugins = await DatabaseHelper.get('plugin-instance').findAll({
                include: [{
                    model: DatabaseHelper.get('document')
                }]
            });
            plugins.forEach(plugin => {
                table.push([
                    plugin.id,
                    plugin.document.name,
                    plugin.type
                ]);
            });

            log.info(table.toString());
        });
    });

commander
    .command('install [document] [plugin]')
    .alias('i')
    .description('Install a plugin, where document is a valid document id and plugin is a `npm install` parameter (name, tarball, etc.)')
    .action(function (documentId, plugin) {
        run(async function () {
            const document = await DatabaseHelper.get('document').findByPk(documentId);
            if (!document) {
                throw new Error('Document not found, is the id correct?');
            }

            await PluginHelper.installPlugin(plugin, document, { dontLoad: true });
            log.info('Plugin installed successfully. Please restart ubud-server to apply changes.');
        });
    });

commander.parse(process.argv);