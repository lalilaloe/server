stages:
  - pre-build
  - pre-check
  - build
  - test
  - publish
  - notify


#
# PRE-BUILD
#

pre_build_next:
  stage: pre-build
  tags:
    - matt.sebbo.net
    - ssh
  retry: 2
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - export OLDVERSION=$(npm view @ubud-app/server@next version)
    - jq -M ".version=\"$OLDVERSION\"" package.json|sponge package.json
    - npm --no-git-tag-version version prerelease
    - cp package.json package.new.json
    - docker pull multiarch/qemu-user-static:register
    - docker pull multiarch/alpine:x86_64-latest-stable
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - docker build
        --build-arg BASEIMAGE="multiarch/alpine:x86_64-latest-stable"
        --build-arg NODE_ENV="develop"
        --build-arg CLIENT_TAG="next"
        --build-arg NEXT="1"
        -t "docker.sebbo.net/ubud/server:${CI_COMMIT_SHA}" .
    - docker push "docker.sebbo.net/ubud/server:${CI_COMMIT_SHA}"
  artifacts:
    paths:
      - package.new.json
    expire_in: 2 weeks
  except:
    - tags

pre_build:
  stage: pre-build
  tags:
    - matt.sebbo.net
    - ssh
  retry: 2
  script:
    - jq -M ".version=\"$CI_COMMIT_TAG\"" package.json|sponge package.json
    - cp package.json package.new.json
  artifacts:
    paths:
      - package.new.json
    expire_in: 2 weeks
  only:
    - tags


#
# PRE-CHECK
#

check_lint:
  stage: pre-check
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker pull "docker.sebbo.net/ubud/server:${CI_COMMIT_SHA}"
    - docker run --rm "docker.sebbo.net/ubud/server:${CI_COMMIT_SHA}" npm run check
  except:
    - tags


#
# BUILD
#

build_next_x86_64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:x86_64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:x86_64-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-x86_64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-x86_64"
  only:
    - develop

build_x86_64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:x86_64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:x86_64-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-x86_64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-x86_64"
  only:
    - tags

build_next_arm64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:arm64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:arm64-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-arm64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-arm64"
  only:
    - develop

build_arm64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:arm64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:arm64-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-arm64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-arm64"
  only:
    - tags

build_next_aarch64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:aarch64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:aarch64-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-aarch64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-aarch64"
  only:
    - develop

build_aarch64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:aarch64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:aarch64-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-aarch64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-aarch64"
  only:
    - tags

build_next_amd64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:amd64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:amd64-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-amd64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-amd64"
  only:
    - develop

build_amd64:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:amd64-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:amd64-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-amd64" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-amd64"
  only:
    - tags

build_next_armhf:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:armhf-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:armhf-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-armhf" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-armhf"
  only:
    - develop

build_armhf:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:armhf-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:armhf-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-armhf" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-armhf"
  only:
    - tags

build_next_i386:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:i386-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:i386-latest-stable"
      --build-arg NODE_ENV="production"
      --build-arg CLIENT_TAG="next"
      --build-arg NEXT="1"
      -t "ubud/server:${CI_COMMIT_SHA}-next-i386" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-next-i386"
  only:
    - develop

build_i386:
  stage: build
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - docker pull multiarch/alpine:i386-latest-stable
    - docker build
      --build-arg BASEIMAGE="multiarch/alpine:i386-latest-stable"
      --build-arg NODE_ENV="production"
      -t "ubud/server:${CI_COMMIT_SHA}-i386" .
    - docker push "ubud/server:${CI_COMMIT_SHA}-i386"
  only:
    - tags


#
# PUBLISH
#

publish_github_branch:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  retry: 2
  script:
    - git checkout $CI_COMMIT_REF_NAME
    - git pull
    - git push "https://${GITHUB_AUTH}@github.com/ubud-app/server.git" --all
  only:
    - master
    - develop

publish_github_tag:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  retry: 2
  script:
    - git push "https://${GITHUB_AUTH}@github.com/ubud-app/server.git" --tags
  only:
    - tags

publish_npm_next:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - yarn install
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - npm publish --tag "next" --access public
  only:
    - develop

publish_npm:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - yarn install
    - npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
    - rm -f ./package.json
    - mv ./package.new.json ./package.json
    - npm publish --access public
  only:
    - tags

publish_docker_next:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker manifest create "ubud/server:next"
        "ubud/server:${CI_COMMIT_SHA}-next-x86_64"
        "ubud/server:${CI_COMMIT_SHA}-next-arm64"
        "ubud/server:${CI_COMMIT_SHA}-next-aarch64"
        "ubud/server:${CI_COMMIT_SHA}-next-amd64"
        "ubud/server:${CI_COMMIT_SHA}-next-armhf"
        "ubud/server:${CI_COMMIT_SHA}-next-i386"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server:next" --variant "x86_64" "ubud/server:${CI_COMMIT_SHA}-next-x86_64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server:next" "ubud/server:${CI_COMMIT_SHA}-next-arm64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server:next" --variant "aarch64" "ubud/server:${CI_COMMIT_SHA}-next-aarch64"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server:next" "ubud/server:${CI_COMMIT_SHA}-next-amd64"
    - docker manifest annotate --arch "arm" --os "linux" "ubud/server:next" "ubud/server:${CI_COMMIT_SHA}-next-armhf"
    - docker manifest annotate --arch "386" --os "linux" "ubud/server:next" "ubud/server:${CI_COMMIT_SHA}-next-i386"
    - docker manifest push -p "ubud/server:next"
  only:
    - develop

publish_docker:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker manifest create "ubud/server"
        "ubud/server:${CI_COMMIT_SHA}-x86_64"
        "ubud/server:${CI_COMMIT_SHA}-arm64"
        "ubud/server:${CI_COMMIT_SHA}-aarch64"
        "ubud/server:${CI_COMMIT_SHA}-amd64"
        "ubud/server:${CI_COMMIT_SHA}-armhf"
        "ubud/server:${CI_COMMIT_SHA}-i386"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server" --variant "x86_64" "ubud/server:${CI_COMMIT_SHA}-x86_64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server" "ubud/server:${CI_COMMIT_SHA}-arm64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server" --variant "aarch64" "ubud/server:${CI_COMMIT_SHA}-aarch64"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server" "ubud/server:${CI_COMMIT_SHA}-amd64"
    - docker manifest annotate --arch "arm" --os "linux" "ubud/server" "ubud/server:${CI_COMMIT_SHA}-armhf"
    - docker manifest annotate --arch "386" --os "linux" "ubud/server" "ubud/server:${CI_COMMIT_SHA}-i386"
    - docker manifest push -p "ubud/server"
  only:
    - tags

publish_docker_version:
  stage: publish
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - export VERSION=$(cat ./package.new.json | jq -rM .version)
    - docker manifest create "ubud/server:${VERSION}"
        "ubud/server:${CI_COMMIT_SHA}-x86_64"
        "ubud/server:${CI_COMMIT_SHA}-arm64"
        "ubud/server:${CI_COMMIT_SHA}-aarch64"
        "ubud/server:${CI_COMMIT_SHA}-amd64"
        "ubud/server:${CI_COMMIT_SHA}-armhf"
        "ubud/server:${CI_COMMIT_SHA}-i386"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server:${VERSION}" --variant "x86_64" "ubud/server:${CI_COMMIT_SHA}-x86_64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server:${VERSION}" "ubud/server:${CI_COMMIT_SHA}-arm64"
    - docker manifest annotate --arch "arm64" --os "linux" "ubud/server:${VERSION}" --variant "aarch64" "ubud/server:${CI_COMMIT_SHA}-aarch64"
    - docker manifest annotate --arch "amd64" --os "linux" "ubud/server:${VERSION}" "ubud/server:${CI_COMMIT_SHA}-amd64"
    - docker manifest annotate --arch "arm" --os "linux" "ubud/server:${VERSION}" "ubud/server:${CI_COMMIT_SHA}-armhf"
    - docker manifest annotate --arch "386" --os "linux" "ubud/server:${VERSION}" "ubud/server:${CI_COMMIT_SHA}-i386"
    - docker manifest push -p "ubud/server:${VERSION}"
  only:
    - tags


#
# NOTIFY
#

notify:
  stage: notify
  tags:
    - matt.sebbo.net
    - ssh
  script:
    - curl -X "POST" "https://beacon.ubud.club/webhooks/update-components/${NOTIFY_WEBHOOK_SECRET}"
  only:
    - develop
    - tags

private-deployment:
  stage: notify
  tags:
    - matt.sebbo.net
    - ssh
  environment:
    name: ubud.sebbo.net
    url: https://ubud.sebbo.net/
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker pull "ubud/server:next"
    - docker stop "ubud" || true
    - docker rm "ubud" || true
    - docker create --restart "always" --name="ubud"
      --link mariadb:db
      -v "/etc/timezone:/etc/timezone:ro" -v "/etc/localtime:/etc/localtime:ro"
      -e "DATABASE=${DEPLOYMENT_DATABASE}"
      -p 127.0.0.1:10060:8080
      "ubud/server:next"
    - docker start ubud
  only:
    - develop
